{"ast":null,"code":"var _jsxFileName = \"/Users/pgmp/Desktop/frontend/src/context/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\"; // JWT\n\nimport jwtDecode from \"jwt-decode\"; // Router\n\nimport { useNavigate } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // let [authTokens, setAuthTokens] = useState(() =>\n  //   localStorage.getItem(\"authTokens\")\n  //     ? JSON.parse(localStorage.getItem(\"authTokens\"))\n  //     : null\n  // );\n  // let [user, setUser] = useState(() =>\n  //   localStorage.getItem(\"authTokens\")\n  //     ? jwtDecode(localStorage.getItem(\"authTokens\"))\n  //     : null\n  // );\n  let [token, setToken] = useState(null);\n  let [user, setUser] = useState(null);\n  let [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  let loginUser = async e => {\n    e.preventDefault();\n    let response = await fetch(\"http://127.0.0.1:8000/api/auth/login/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: e.target.username.value,\n        password: e.target.password.value\n      })\n    });\n    let data = await response.json(); // let { key } = await response.json();\n    // Status 200 === \"OK\"\n\n    if (response.status === 200) {\n      let tokens = {\n        access: data.access_token,\n        refresh: data.refresh_token\n      };\n      console.log(\"data\", tokens);\n      setToken(tokens);\n      setUser(data.user); // let response = await fetch(\"http://127.0.0.1:8000/api/auth/user/\", {\n      //   method: \"GET\",\n      //   headers: {\n      //     \"Content-Type\": \"application/json\",\n      // Authorization: `Token ${key}`,\n      //   },\n      // });\n      // let user = await response.json();\n      // setUser(user);\n      // setUser(jwtDecode(data.access_token));\n      // setUser(data.user);\n      // localStorage.setItem(\"authTokens\", JSON.stringify(data));\n\n      navigate(\"/\");\n    } else {\n      alert(\"Login error!\");\n    }\n  };\n\n  let logoutUser = () => {\n    setToken(null); // setUser(null);\n    // localStorage.removeItem(\"authTokens\");\n  };\n\n  let registerUser = async e => {\n    e.preventDefault();\n    let username = e.currentTarget.username.value;\n    let password = e.currentTarget.password.value;\n    let confirm = e.currentTarget.confirm.value;\n\n    if (password !== confirm) {\n      alert(\"Passwords do not match!\");\n      e.currentTarget.password.value = \"\";\n      e.currentTarget.confirm.value = \"\";\n    } else {\n      console.log(\"Registering new user!\");\n      let response = await fetch(\"http://127.0.0.1:8000/api/register/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: username,\n          password: password\n        })\n      });\n    }\n  }; // let updateToken = async () => {\n  //   console.log(\"Updating token!\");\n  //   let response = await fetch(\"http://127.0.0.1:8000/api/token/refresh/\", {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //     body: JSON.stringify({ refresh: authTokens.refresh }),\n  //   });\n  //   let data = await response.json();\n  //   if (response.status === 200) {\n  //     console.log(\"Token refreshed!\");\n  //     setAuthTokens({ ...authTokens, access: data.access });\n  //     localStorage.setItem(\n  //       \"authTokens\",\n  //       JSON.stringify({ ...authTokens, access: data.access })\n  //     );\n  //   } else logoutUser();\n  // };\n  // useEffect(() => {\n  //   let minutes = 1000 * 60 * 4;\n  //   let interval = setInterval(() => {\n  //     if (authTokens) {\n  //       updateToken();\n  //     }\n  //   }, minutes);\n  //   return () => clearInterval(interval);\n  // }, [authTokens, loading]);\n\n\n  let contextData = {\n    user: user,\n    token: token,\n    loginUser: loginUser // logoutUser: logoutUser,\n    // registerUser: registerUser,\n\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"/4HlN7oB3vKMbpPPiLfzyd0pTy4=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/pgmp/Desktop/frontend/src/context/AuthContext.js"],"names":["createContext","useState","useEffect","jwtDecode","useNavigate","AuthContext","AuthProvider","children","token","setToken","user","setUser","loading","setLoading","navigate","loginUser","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","username","target","value","password","data","json","status","tokens","access","access_token","refresh","refresh_token","console","log","alert","logoutUser","registerUser","currentTarget","confirm","contextData"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\n// JWT\nimport jwtDecode from \"jwt-decode\";\n// Router\nimport { useNavigate } from \"react-router\";\n\nconst AuthContext = createContext();\nexport default AuthContext;\n\nexport const AuthProvider = ({ children }) => {\n  // let [authTokens, setAuthTokens] = useState(() =>\n  //   localStorage.getItem(\"authTokens\")\n  //     ? JSON.parse(localStorage.getItem(\"authTokens\"))\n  //     : null\n  // );\n  // let [user, setUser] = useState(() =>\n  //   localStorage.getItem(\"authTokens\")\n  //     ? jwtDecode(localStorage.getItem(\"authTokens\"))\n  //     : null\n  // );\n  let [token, setToken] = useState(null);\n  let [user, setUser] = useState(null);\n\n  let [loading, setLoading] = useState(true);\n\n  const navigate = useNavigate();\n\n  let loginUser = async (e) => {\n    e.preventDefault();\n    let response = await fetch(\"http://127.0.0.1:8000/api/auth/login/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username: e.target.username.value,\n        password: e.target.password.value,\n      }),\n    });\n    let data = await response.json();\n    // let { key } = await response.json();\n    // Status 200 === \"OK\"\n    if (response.status === 200) {\n      let tokens = { access: data.access_token, refresh: data.refresh_token };\n      console.log(\"data\", tokens);\n      setToken(tokens);\n      setUser(data.user);\n      // let response = await fetch(\"http://127.0.0.1:8000/api/auth/user/\", {\n      //   method: \"GET\",\n      //   headers: {\n      //     \"Content-Type\": \"application/json\",\n      // Authorization: `Token ${key}`,\n      //   },\n      // });\n      // let user = await response.json();\n\n      // setUser(user);\n      // setUser(jwtDecode(data.access_token));\n      // setUser(data.user);\n      // localStorage.setItem(\"authTokens\", JSON.stringify(data));\n      navigate(\"/\");\n    } else {\n      alert(\"Login error!\");\n    }\n  };\n\n  let logoutUser = () => {\n    setToken(null);\n    // setUser(null);\n    // localStorage.removeItem(\"authTokens\");\n  };\n\n  let registerUser = async (e) => {\n    e.preventDefault();\n    let username = e.currentTarget.username.value;\n    let password = e.currentTarget.password.value;\n    let confirm = e.currentTarget.confirm.value;\n    if (password !== confirm) {\n      alert(\"Passwords do not match!\");\n      e.currentTarget.password.value = \"\";\n      e.currentTarget.confirm.value = \"\";\n    } else {\n      console.log(\"Registering new user!\");\n      let response = await fetch(\"http://127.0.0.1:8000/api/register/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ username: username, password: password }),\n      });\n    }\n  };\n\n  // let updateToken = async () => {\n  //   console.log(\"Updating token!\");\n  //   let response = await fetch(\"http://127.0.0.1:8000/api/token/refresh/\", {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //     body: JSON.stringify({ refresh: authTokens.refresh }),\n  //   });\n  //   let data = await response.json();\n\n  //   if (response.status === 200) {\n  //     console.log(\"Token refreshed!\");\n  //     setAuthTokens({ ...authTokens, access: data.access });\n  //     localStorage.setItem(\n  //       \"authTokens\",\n  //       JSON.stringify({ ...authTokens, access: data.access })\n  //     );\n  //   } else logoutUser();\n  // };\n\n  // useEffect(() => {\n  //   let minutes = 1000 * 60 * 4;\n  //   let interval = setInterval(() => {\n  //     if (authTokens) {\n  //       updateToken();\n  //     }\n  //   }, minutes);\n  //   return () => clearInterval(interval);\n  // }, [authTokens, loading]);\n\n  let contextData = {\n    user: user,\n    token: token,\n    loginUser: loginUser,\n    // logoutUser: logoutUser,\n    // registerUser: registerUser,\n  };\n\n  return (\n    <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}