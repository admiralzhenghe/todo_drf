{"ast":null,"code":"var _jsxFileName = \"/Users/pgmp/Desktop/frontend/src/context/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\"; // JWT\n// import jwtDecode from \"jwt-decode\";\n// Router\n\nimport { useNavigate } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  console.log(\"Auth\");\n  let [tokens, setTokens] = useState(() => localStorage.getItem(\"authTokens\") ? JSON.parse(localStorage.getItem(\"authTokens\")) : null);\n  let [user, setUser] = useState(() => localStorage.getItem(\"authTokens\") ? JSON.parse(localStorage.getItem(\"authTokens\")).user : null);\n  let [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  let loginUser = async e => {\n    e.preventDefault();\n    let response = await fetch(\"http://127.0.0.1:8000/api/auth/login/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: e.target.username.value,\n        password: e.target.password.value\n      })\n    });\n    let data = await response.json(); // Status 200 === \"OK\"\n\n    if (response.status === 200) {\n      let tokens = {\n        access: data.access_token,\n        refresh: data.refresh_token,\n        user: data.user\n      };\n      setTokens(tokens);\n      setUser(data.user);\n      localStorage.setItem(\"authTokens\", JSON.stringify(tokens));\n      navigate(\"/\");\n    } else {\n      alert(\"Login error!\");\n    }\n  };\n\n  let logoutUser = () => {\n    setTokens(null);\n    setUser(null);\n    localStorage.removeItem(\"authTokens\");\n  };\n\n  let registerUser = async e => {\n    e.preventDefault();\n    let user = {\n      username: e.currentTarget.username.value,\n      password: e.currentTarget.password.value,\n      password2: e.currentTarget.confirm.value\n    };\n\n    if (e.currentTarget.password.value !== e.currentTarget.confirm.value) {\n      alert(\"Passwords do not match!\");\n    } else if (e.currentTarget.password.value.length < 8) {\n      alert(\"This password is too short. It must contain at least 8 characters.\");\n    } else {\n      console.log(\"Registering new user!\");\n      let response = await fetch(\"http://127.0.0.1:8000/api/auth/register/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(user)\n      });\n      let data = await response.json();\n\n      if (!data.user) {\n        alert(\"This password is too common!\");\n      } // Otherwise, login the newly registered user\n      else {\n        console.log(data);\n        let tokens = {\n          access: data.access_token,\n          refresh: data.refresh_token,\n          user: data.user\n        };\n        setTokens(tokens);\n        setUser(data.user);\n        localStorage.setItem(\"authTokens\", JSON.stringify(tokens));\n        navigate(\"/\");\n      }\n    }\n\n    e.target.password.value = \"\";\n    e.target.confirm.value = \"\";\n  };\n\n  let updateToken = async () => {\n    console.log(\"Updating token!\");\n    let response = await fetch(\"http://127.0.0.1:8000/api/auth/token/refresh/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        refresh: tokens.refresh\n      })\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      console.log(\"Token refreshed!\", data);\n      setTokens({ ...tokens,\n        access: data.access\n      });\n      localStorage.setItem(\"authTokens\", JSON.stringify({ ...tokens,\n        access: data.access\n      }));\n    } else logoutUser();\n  };\n\n  useEffect(() => {\n    console.log(\"useEffect\", tokens);\n    let minutes = 1000 * 60 * 1; // let minutes = 2000;\n\n    let interval = setInterval(() => {\n      if (tokens) {\n        console.log(\"Updating inside useEffect\");\n        updateToken();\n      }\n    }, minutes);\n    return () => clearInterval(interval);\n  }, [tokens, loading]);\n  let contextData = {\n    user: user,\n    tokens: tokens,\n    loginUser: loginUser,\n    logoutUser: logoutUser,\n    registerUser: registerUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"u3j+qJfQiuucrNjbW13UC0c4atk=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/pgmp/Desktop/frontend/src/context/AuthContext.js"],"names":["createContext","useState","useEffect","useNavigate","AuthContext","AuthProvider","children","console","log","tokens","setTokens","localStorage","getItem","JSON","parse","user","setUser","loading","setLoading","navigate","loginUser","e","preventDefault","response","fetch","method","headers","body","stringify","username","target","value","password","data","json","status","access","access_token","refresh","refresh_token","setItem","alert","logoutUser","removeItem","registerUser","currentTarget","password2","confirm","length","updateToken","minutes","interval","setInterval","clearInterval","contextData"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\n// JWT\n// import jwtDecode from \"jwt-decode\";\n// Router\nimport { useNavigate } from \"react-router\";\n\nconst AuthContext = createContext();\nexport default AuthContext;\n\nexport const AuthProvider = ({ children }) => {\n  console.log(\"Auth\");\n  let [tokens, setTokens] = useState(() =>\n    localStorage.getItem(\"authTokens\")\n      ? JSON.parse(localStorage.getItem(\"authTokens\"))\n      : null\n  );\n  let [user, setUser] = useState(() =>\n    localStorage.getItem(\"authTokens\")\n      ? JSON.parse(localStorage.getItem(\"authTokens\")).user\n      : null\n  );\n\n  let [loading, setLoading] = useState(true);\n\n  const navigate = useNavigate();\n\n  let loginUser = async (e) => {\n    e.preventDefault();\n    let response = await fetch(\"http://127.0.0.1:8000/api/auth/login/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username: e.target.username.value,\n        password: e.target.password.value,\n      }),\n    });\n    let data = await response.json();\n\n    // Status 200 === \"OK\"\n    if (response.status === 200) {\n      let tokens = {\n        access: data.access_token,\n        refresh: data.refresh_token,\n        user: data.user,\n      };\n      setTokens(tokens);\n      setUser(data.user);\n      localStorage.setItem(\"authTokens\", JSON.stringify(tokens));\n      navigate(\"/\");\n    } else {\n      alert(\"Login error!\");\n    }\n  };\n\n  let logoutUser = () => {\n    setTokens(null);\n    setUser(null);\n    localStorage.removeItem(\"authTokens\");\n  };\n\n  let registerUser = async (e) => {\n    e.preventDefault();\n    let user = {\n      username: e.currentTarget.username.value,\n      password: e.currentTarget.password.value,\n      password2: e.currentTarget.confirm.value,\n    };\n    if (e.currentTarget.password.value !== e.currentTarget.confirm.value) {\n      alert(\"Passwords do not match!\");\n    } else if (e.currentTarget.password.value.length < 8) {\n      alert(\n        \"This password is too short. It must contain at least 8 characters.\"\n      );\n    } else {\n      console.log(\"Registering new user!\");\n      let response = await fetch(\"http://127.0.0.1:8000/api/auth/register/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(user),\n      });\n\n      let data = await response.json();\n      if (!data.user) {\n        alert(\"This password is too common!\");\n      }\n      // Otherwise, login the newly registered user\n      else {\n        console.log(data);\n        let tokens = {\n          access: data.access_token,\n          refresh: data.refresh_token,\n          user: data.user,\n        };\n        setTokens(tokens);\n        setUser(data.user);\n        localStorage.setItem(\"authTokens\", JSON.stringify(tokens));\n        navigate(\"/\");\n      }\n    }\n    e.target.password.value = \"\";\n    e.target.confirm.value = \"\";\n  };\n\n  let updateToken = async () => {\n    console.log(\"Updating token!\");\n    let response = await fetch(\n      \"http://127.0.0.1:8000/api/auth/token/refresh/\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ refresh: tokens.refresh }),\n      }\n    );\n    let data = await response.json();\n    if (response.status === 200) {\n      console.log(\"Token refreshed!\", data);\n      setTokens({ ...tokens, access: data.access });\n      localStorage.setItem(\n        \"authTokens\",\n        JSON.stringify({ ...tokens, access: data.access })\n      );\n    } else logoutUser();\n  };\n\n  useEffect(() => {\n    console.log(\"useEffect\", tokens);\n    let minutes = 1000 * 60 * 1;\n    // let minutes = 2000;\n    let interval = setInterval(() => {\n      if (tokens) {\n        console.log(\"Updating inside useEffect\");\n        updateToken();\n      }\n    }, minutes);\n    return () => clearInterval(interval);\n  }, [tokens, loading]);\n\n  let contextData = {\n    user: user,\n    tokens: tokens,\n    loginUser: loginUser,\n    logoutUser: logoutUser,\n    registerUser: registerUser,\n  };\n\n  return (\n    <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}