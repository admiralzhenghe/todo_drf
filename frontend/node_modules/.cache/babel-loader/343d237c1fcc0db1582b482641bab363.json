{"ast":null,"code":"var _jsxFileName = \"/Users/pgmp/Desktop/frontend/src/context/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\"; // JWT\n\nimport jwtDecode from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  let [authTokens, setAuthTokens] = useState(null);\n  let [user, setUser] = useState(null);\n\n  let loginUser = async e => {\n    e.preventDefault();\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: e.target.username.value,\n        password: e.target.password.value\n      })\n    });\n    let data = await response.json(); // Status 200 === \"OK\"\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwtDecode(data.access));\n      console.log(\"user:\", user.username);\n    } else {\n      alert(\"Login error!\");\n    }\n  };\n\n  let contextData = {\n    user: user,\n    loginUser: loginUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"zY+G5N+8H7wFCqhkyy+nfU1QpSs=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/pgmp/Desktop/frontend/src/context/AuthContext.js"],"names":["createContext","useState","useEffect","jwtDecode","AuthContext","AuthProvider","children","authTokens","setAuthTokens","user","setUser","loginUser","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","username","target","value","password","data","json","status","access","console","log","alert","contextData"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD,C,CACA;;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,WAAW,gBAAGJ,aAAa,EAAjC;AACA,eAAeI,WAAf;AAEA,OAAO,MAAMC,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,MAAI,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,IAAD,CAA1C;AACA,MAAI,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,IAAD,CAA9B;;AAEA,MAAIU,SAAS,GAAG,MAAOC,CAAP,IAAa;AAC3BA,IAAAA,CAAC,CAACC,cAAF;AACA,QAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAD,EAAqC;AAC7DC,MAAAA,MAAM,EAAE,MADqD;AAE7DC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFoD;AAK7DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,QAAQ,EAAET,CAAC,CAACU,MAAF,CAASD,QAAT,CAAkBE,KADT;AAEnBC,QAAAA,QAAQ,EAAEZ,CAAC,CAACU,MAAF,CAASE,QAAT,CAAkBD;AAFT,OAAf;AALuD,KAArC,CAA1B;AAUA,QAAIE,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAT,EAAjB,CAZ2B,CAc3B;;AACA,QAAIZ,QAAQ,CAACa,MAAT,KAAoB,GAAxB,EAA6B;AAC3BnB,MAAAA,aAAa,CAACiB,IAAD,CAAb;AACAf,MAAAA,OAAO,CAACP,SAAS,CAACsB,IAAI,CAACG,MAAN,CAAV,CAAP;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBrB,IAAI,CAACY,QAA1B;AACD,KAJD,MAIO;AACLU,MAAAA,KAAK,CAAC,cAAD,CAAL;AACD;AACF,GAtBD;;AAwBA,MAAIC,WAAW,GAAG;AAChBvB,IAAAA,IAAI,EAAEA,IADU;AAEhBE,IAAAA,SAAS,EAAEA;AAFK,GAAlB;AAKA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEqB,WAA7B;AAAA,cAA2C1B;AAA3C;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CApCM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\n// JWT\nimport jwtDecode from \"jwt-decode\";\n\nconst AuthContext = createContext();\nexport default AuthContext;\n\nexport const AuthProvider = ({ children }) => {\n  let [authTokens, setAuthTokens] = useState(null);\n  let [user, setUser] = useState(null);\n\n  let loginUser = async (e) => {\n    e.preventDefault();\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username: e.target.username.value,\n        password: e.target.password.value,\n      }),\n    });\n    let data = await response.json();\n\n    // Status 200 === \"OK\"\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwtDecode(data.access));\n      console.log(\"user:\", user.username);\n    } else {\n      alert(\"Login error!\");\n    }\n  };\n\n  let contextData = {\n    user: user,\n    loginUser: loginUser,\n  };\n\n  return (\n    <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}