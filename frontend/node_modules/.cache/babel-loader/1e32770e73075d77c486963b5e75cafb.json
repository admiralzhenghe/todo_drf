{"ast":null,"code":"var _jsxFileName = \"/Users/pgmp/Desktop/frontend/src/context/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\"; // JWT\n\nimport jwtDecode from \"jwt-decode\"; // Router\n\nimport { useNavigate } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  let [authTokens, setAuthTokens] = useState(() => localStorage.getItem(\"authTokens\") ? JSON.parse(localStorage.getItem(\"authTokens\")) : null);\n  let [user, setUser] = useState(() => localStorage.getItem(\"authTokens\") ? jwtDecode(localStorage.getItem(\"authTokens\")) : null);\n  let [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  let loginUser = async e => {\n    e.preventDefault();\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: e.target.username.value,\n        password: e.target.password.value\n      })\n    });\n    let data = await response.json(); // Status 200 === \"OK\"\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwtDecode(data.access));\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\n      navigate(\"/\");\n    } else {\n      alert(\"Login error!\");\n    }\n  };\n\n  let logoutUser = () => {\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem(\"authTokens\");\n  };\n\n  let registerUser = e => {\n    e.preventDefault();\n    let password = e.currentTarget.password.value;\n    let confirm = e.currentTarget.confirm.value;\n    console.log(password, confirm);\n\n    if (password !== confirm) {\n      alert(\"passwords dont match\");\n    }\n  };\n\n  let updateToken = async () => {\n    console.log(\"Updating token!\");\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/refresh/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        refresh: authTokens.refresh\n      })\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      console.log(\"Token refreshed!\");\n      setAuthTokens({ ...authTokens,\n        access: data.access\n      });\n      localStorage.setItem(\"authTokens\", JSON.stringify({ ...authTokens,\n        access: data.access\n      }));\n    } else logoutUser();\n  };\n\n  useEffect(() => {\n    let minutes = 1000 * 60 * 4;\n    let interval = setInterval(() => {\n      if (authTokens) {\n        updateToken();\n      }\n    }, minutes);\n    return () => clearInterval(interval);\n  }, [authTokens, loading]);\n  let contextData = {\n    user: user,\n    loginUser: loginUser,\n    logoutUser: logoutUser,\n    registerUser: registerUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"Hi4FOcTnFGKfVi5RgRjdgH5Kupw=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/pgmp/Desktop/frontend/src/context/AuthContext.js"],"names":["createContext","useState","useEffect","jwtDecode","useNavigate","AuthContext","AuthProvider","children","authTokens","setAuthTokens","localStorage","getItem","JSON","parse","user","setUser","loading","setLoading","navigate","loginUser","e","preventDefault","response","fetch","method","headers","body","stringify","username","target","value","password","data","json","status","access","setItem","alert","logoutUser","removeItem","registerUser","currentTarget","confirm","console","log","updateToken","refresh","minutes","interval","setInterval","clearInterval","contextData"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\n// JWT\nimport jwtDecode from \"jwt-decode\";\n// Router\nimport { useNavigate } from \"react-router\";\n\nconst AuthContext = createContext();\nexport default AuthContext;\n\nexport const AuthProvider = ({ children }) => {\n  let [authTokens, setAuthTokens] = useState(() =>\n    localStorage.getItem(\"authTokens\")\n      ? JSON.parse(localStorage.getItem(\"authTokens\"))\n      : null\n  );\n  let [user, setUser] = useState(() =>\n    localStorage.getItem(\"authTokens\")\n      ? jwtDecode(localStorage.getItem(\"authTokens\"))\n      : null\n  );\n  let [loading, setLoading] = useState(true);\n\n  const navigate = useNavigate();\n\n  let loginUser = async (e) => {\n    e.preventDefault();\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username: e.target.username.value,\n        password: e.target.password.value,\n      }),\n    });\n    let data = await response.json();\n\n    // Status 200 === \"OK\"\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwtDecode(data.access));\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\n      navigate(\"/\");\n    } else {\n      alert(\"Login error!\");\n    }\n  };\n\n  let logoutUser = () => {\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem(\"authTokens\");\n  };\n\n  let registerUser = (e) => {\n    e.preventDefault();\n    let password = e.currentTarget.password.value;\n    let confirm = e.currentTarget.confirm.value;\n    console.log(password, confirm);\n    if (password !== confirm) {\n      alert(\"passwords dont match\");\n    }\n  };\n\n  let updateToken = async () => {\n    console.log(\"Updating token!\");\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/refresh/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ refresh: authTokens.refresh }),\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      console.log(\"Token refreshed!\");\n      setAuthTokens({ ...authTokens, access: data.access });\n      localStorage.setItem(\n        \"authTokens\",\n        JSON.stringify({ ...authTokens, access: data.access })\n      );\n    } else logoutUser();\n  };\n\n  useEffect(() => {\n    let minutes = 1000 * 60 * 4;\n    let interval = setInterval(() => {\n      if (authTokens) {\n        updateToken();\n      }\n    }, minutes);\n    return () => clearInterval(interval);\n  }, [authTokens, loading]);\n\n  let contextData = {\n    user: user,\n    loginUser: loginUser,\n    logoutUser: logoutUser,\n    registerUser: registerUser,\n  };\n\n  return (\n    <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}