[{"/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/index.js":"1","/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/App.js":"2","/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/utils/ProtectedRoute.js":"3","/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/pages/Landing.js":"4","/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/pages/Todo.js":"5","/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/context/AuthContext.js":"6","/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/components/Login.js":"7","/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/components/Header.js":"8","/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/components/Register.js":"9"},{"size":197,"mtime":1637616260196,"results":"10","hashOfConfig":"11"},{"size":768,"mtime":1640038537514,"results":"12","hashOfConfig":"11"},{"size":339,"mtime":1638844560490,"results":"13","hashOfConfig":"11"},{"size":580,"mtime":1638563674192,"results":"14","hashOfConfig":"11"},{"size":5940,"mtime":1639637403594,"results":"15","hashOfConfig":"11"},{"size":4464,"mtime":1639870617025,"results":"16","hashOfConfig":"11"},{"size":1063,"mtime":1638562569235,"results":"17","hashOfConfig":"11"},{"size":688,"mtime":1640039096171,"results":"18","hashOfConfig":"11"},{"size":1353,"mtime":1638566455246,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7v2ut1",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/index.js",[],"/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/App.js",[],"/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/utils/ProtectedRoute.js",[],"/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/pages/Landing.js",[],"/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/pages/Todo.js",["40"],"import React, { useState, useEffect, useContext } from \"react\";\n\n// Components\nimport Header from \"../components/Header\";\n\n// Context\nimport AuthContext from \"../context/AuthContext\";\n\nconst Todo = () => {\n  let { user, tokens } = useContext(AuthContext);\n  const [state, setState] = useState({\n    todoList: [],\n    activeItem: {\n      user: user.pk,\n      id: null,\n      title: \"\",\n      completed: false,\n    },\n    editing: false,\n  });\n\n  const handleFormInput = (e) => {\n    // let name = e.target.name;\n    let value = e.target.value;\n    setState({\n      ...state,\n      activeItem: { ...state.activeItem, title: value },\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    var url = \"http://127.0.0.1:8000/api/task-create/\";\n    if (state.editing === true) {\n      url = `http://127.0.0.1:8000/api/task-update/${state.activeItem.id}/`;\n    }\n    const csrftoken = getCookie(\"csrftoken\");\n    async function submitTask() {\n      try {\n        await fetch(url, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${tokens.access}`,\n            \"X-CSRFToken\": csrftoken,\n          },\n          body: JSON.stringify(state.activeItem),\n        });\n        setState({\n          ...state,\n          editing: false,\n        });\n        fetchTasks();\n      } catch {\n        console.log(\"ERROR!\");\n      }\n    }\n    submitTask();\n  };\n\n  const startEdit = (task) => {\n    setState({ ...state, activeItem: task, editing: true });\n  };\n\n  const handleDelete = (id) => {\n    const deleteTask = async () => {\n      try {\n        await fetch(`http://127.0.0.1:8000/api/task-delete/${id}/`, {\n          method: \"DELETE\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${tokens.access}`,\n          },\n        });\n        fetchTasks();\n      } catch {\n        console.log(\"ERROR!\");\n      }\n    };\n    deleteTask();\n  };\n\n  const handleCompleted = (task) => {\n    task.completed = !task.completed;\n    const completeTask = async () => {\n      let response = await fetch(\n        `http://127.0.0.1:8000/api/task-update/${task.id}/`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${tokens.access}`,\n          },\n          body: JSON.stringify(task),\n        }\n      );\n      if (response.status === 200) {\n        fetchTasks();\n      } else {\n        console.log(\"ERROR updating task completion!\");\n      }\n    };\n    completeTask();\n  };\n\n  async function fetchTasks() {\n    let response = await fetch(`http://127.0.0.1:8000/api/task-list/`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${tokens.access}`,\n      },\n    });\n\n    let data = await response.json();\n\n    if (response.status === 200) {\n      setState({\n        todoList: data,\n        // Reset the activeItem object\n        activeItem: {\n          user: user.pk,\n          id: null,\n          title: \"\",\n          completed: false,\n        },\n        editing: false,\n      });\n    }\n  }\n\n  function getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== \"\") {\n      const cookies = document.cookie.split(\";\");\n      for (let i = 0; i < cookies.length; i++) {\n        const cookie = cookies[i].trim();\n        // Does this cookie string begin with the name we want?\n        if (cookie.substring(0, name.length + 1) === name + \"=\") {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  }\n\n  useEffect(() => {\n    if (state.editing === false) fetchTasks();\n  }, [state.editing]);\n\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <div className=\"task-container\">\n          <div id=\"form-wrapper\">\n            <form id=\"form\" onSubmit={handleSubmit}>\n              <div className=\"flex-wrapper\">\n                <div style={{ flex: 6 }}>\n                  <input\n                    className=\"form-control\"\n                    id=\"title\"\n                    name=\"title\"\n                    onChange={handleFormInput}\n                    placeholder=\"Title\"\n                    type=\"text\"\n                    value={state.activeItem.title}\n                  />\n                </div>\n                <div style={{ flex: 1 }}>\n                  <input\n                    className=\"btn btn-warning\"\n                    id=\"submit\"\n                    name=\"Add\"\n                    type=\"submit\"\n                  />\n                </div>\n              </div>\n            </form>\n            <div className=\"list-wrapper\">\n              {state.todoList.length > 0 &&\n                state.todoList.map((task) => (\n                  <div key={task.id} className=\"task-wrapper\">\n                    <div\n                      className={task.completed ? \"completed\" : null}\n                      style={{ flex: 7 }}\n                      onClick={() => handleCompleted(task)}\n                    >\n                      {task.title}\n                    </div>\n                    <div style={{ flex: 1 }}>\n                      <button\n                        className=\"btn btn-success\"\n                        onClick={() => startEdit(task)}\n                      >\n                        Edit\n                      </button>\n                    </div>\n                    <div style={{ flex: 1 }}>\n                      <button\n                        className=\"btn btn-danger\"\n                        onClick={() => handleDelete(task.id)}\n                      >\n                        Delete\n                      </button>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Todo;\n","/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/context/AuthContext.js",["41"],"import { createContext, useState, useEffect } from \"react\";\n// Router\nimport { useNavigate } from \"react-router\";\n\nconst AuthContext = createContext();\nexport default AuthContext;\n\nexport const AuthProvider = ({ children }) => {\n  let [tokens, setTokens] = useState(() =>\n    localStorage.getItem(\"authTokens\")\n      ? JSON.parse(localStorage.getItem(\"authTokens\"))\n      : null\n  );\n  let [user, setUser] = useState(() =>\n    localStorage.getItem(\"authTokens\")\n      ? JSON.parse(localStorage.getItem(\"authTokens\")).user\n      : null\n  );\n\n  let [loading, setLoading] = useState(true);\n\n  const navigate = useNavigate();\n\n  let loginUser = async (e) => {\n    e.preventDefault();\n    let response = await fetch(\"http://127.0.0.1:8000/api/auth/login/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username: e.target.username.value,\n        password: e.target.password.value,\n      }),\n    });\n    let data = await response.json();\n\n    // Status 200 === \"OK\"\n    if (response.status === 200) {\n      let tokens = {\n        access: data.access_token,\n        refresh: data.refresh_token,\n        user: data.user,\n      };\n      setTokens(tokens);\n      setUser(data.user);\n      localStorage.setItem(\"authTokens\", JSON.stringify(tokens));\n      navigate(\"/\");\n    } else {\n      alert(\"Login error!\");\n    }\n  };\n\n  let logoutUser = () => {\n    setTokens(null);\n    setUser(null);\n    localStorage.removeItem(\"authTokens\");\n  };\n\n  let registerUser = async (e) => {\n    e.preventDefault();\n    let username = e.currentTarget.username.value;\n    let password = e.currentTarget.password.value;\n    let confirm = e.currentTarget.confirm.value;\n\n    if (password !== confirm) {\n      alert(\"Passwords do not match!\");\n    } else if (password < 8) {\n      alert(\n        \"This password is too short. It must contain at least 8 characters.\"\n      );\n    } else {\n      console.log(\"Registering new user!\");\n      let response = await fetch(\"http://127.0.0.1:8000/api/auth/register/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          username: username,\n          password1: password,\n          password2: confirm,\n        }),\n      });\n\n      let data = await response.json();\n      // If a registration error occurs\n      if (!data.user) {\n        if (data.username) alert(`${data.username[0]}`);\n        else if (data.password1) {\n          let message = data.password1.join(\" \");\n          alert(`${message}`);\n        }\n      }\n      // Otherwise, login the newly registered user\n      else {\n        let tokens = {\n          access: data.access_token,\n          refresh: data.refresh_token,\n          user: data.user,\n        };\n        setTokens(tokens);\n        setUser(data.user);\n        localStorage.setItem(\"authTokens\", JSON.stringify(tokens));\n        navigate(\"/\");\n      }\n    }\n    e.target.password.value = \"\";\n    e.target.confirm.value = \"\";\n  };\n\n  let updateToken = async () => {\n    if (!user) return setLoading(false);\n    console.log(\"Updating token!\");\n    let response = await fetch(\n      \"http://127.0.0.1:8000/api/auth/token/refresh/\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ refresh: tokens?.refresh }),\n      }\n    );\n    let data = await response.json();\n    if (response.status === 200) {\n      console.log(\"Token refreshed!\");\n      setTokens({ ...tokens, access: data.access });\n      localStorage.setItem(\n        \"authTokens\",\n        JSON.stringify({ ...tokens, access: data.access })\n      );\n    } else logoutUser();\n\n    if (loading) {\n      console.log(\"Set loading to false\");\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (loading) {\n      updateToken();\n    }\n    let minutes = 1000 * 60 * 4;\n    console.log(\"Four minutes\");\n    let interval = setInterval(() => {\n      if (tokens) {\n        updateToken();\n      }\n    }, minutes);\n    return () => {\n      console.log(\"Clearing interval\");\n      clearInterval(interval);\n    };\n  }, [tokens, loading]);\n\n  let contextData = {\n    user: user,\n    tokens: tokens,\n    loginUser: loginUser,\n    logoutUser: logoutUser,\n    registerUser: registerUser,\n  };\n\n  return (\n    <AuthContext.Provider value={contextData}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n","/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/components/Login.js",[],"/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/components/Header.js",[],"/Users/pgmp/Desktop/todo_drf/todo_drf/frontend/src/components/Register.js",[],{"ruleId":"42","severity":1,"message":"43","line":150,"column":6,"nodeType":"44","endLine":150,"endColumn":21,"suggestions":"45"},{"ruleId":"42","severity":1,"message":"46","line":156,"column":6,"nodeType":"44","endLine":156,"endColumn":23,"suggestions":"47"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchTasks'. Either include it or remove the dependency array.","ArrayExpression",["48"],"React Hook useEffect has a missing dependency: 'updateToken'. Either include it or remove the dependency array.",["49"],{"desc":"50","fix":"51"},{"desc":"52","fix":"53"},"Update the dependencies array to be: [fetchTasks, state.editing]",{"range":"54","text":"55"},"Update the dependencies array to be: [tokens, loading, updateToken]",{"range":"56","text":"57"},[3768,3783],"[fetchTasks, state.editing]",[4170,4187],"[tokens, loading, updateToken]"]